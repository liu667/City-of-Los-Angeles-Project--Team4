library(ggplot2)
library(dplyr)
library(tidyr)
library(stringr)
library(ggmap)
library(zipcode)
library(lubridate)
library(readxl)
library(leaflet)
library(rgdal)
library(sp)
library(raster)
library(maptools)
library(geojsonio)
library(tmap)

data_311 = read.csv("la_city_independent_analysis/data/311_calls_w_CTs20171102134828.csv")
data_crime = read.csv("la_city_independent_analysis/data/crime_w_CTs20171102134814.csv")
data_shelter = read.csv("la_city_independent_analysis/data/shelters_w_CTs20171102134808.csv")
data_census17_tract = read_excel("la_city_independent_analysis/data/homeless-count-2017-results-by-census-tract.xlsx",
                                 sheet = "Count_by_Tract")
data_census17_community = read_excel("la_city_independent_analysis/data/homeless-count-2017-results-by-census-tract.xlsx",
                                     sheet = "Count_by_Community")

community_map = readOGR("CnclDist_July2012/CnclDist_July2012.shp")
community_map1 = spTransform(community_map, CRS("+proj=longlat +datum=WGS84"))
community_map = fortify(community_map1, region = "DISTRICT")
communitymap = as.data.frame(community_map1)
tract_map = readOGR("la_city_independent_analysis/data/raw_data/CENSUS_TRACTS_2010.zip_unzipped/CENSUS_TRACTS_2010.shp")
tract_map2 = spTransform(tract_map, CRS("+proj=longlat +datum=WGS84"))

polyFunc<-function(groupname, dat){
  poly<-filter(dat, id==groupname) %>%
    dplyr::select(long, lat)
  return(Polygons(list(Polygon(poly)), groupname))
}

shelter_map = readOGR("Homeless_Shelters_and_Services/Homeless_Shelters_and_Services.shp")


library(shiny)
library(shinythemes)
library(lubridate)
library(plotly)



ui <- navbarPage(
  theme = shinytheme("paper"),
  title = "City fo Los Angeles Homeless Project",
  
  tabPanel("Overview",
           fluidPage(
             h1("City of Los Angeles Homeless Overview"),
             tags$blockquote("123"),
             #plain text in paragraph
             p("This is the body."),
             #Single line break
             br(),
             #bold text in paragraph
             tags$b("This is the bold text"),
             div("div creates segments of text with a similar style. 
                 This division of text is all blue because I passed the argument 'style = color:blue' to div",
                 style = "color:blue"),
             
             img(src='homeless.jpg', align = "right"),
             
             
             fluidRow(
               column(6, h3("Title in one row")),
               column(6)
               
             ))),
  
  navbarMenu("Data Analysis",
             
             tabPanel("Homeless Data", fluidPage(
               
               sidebarLayout(
                 sidebarPanel(
                   selectInput(inputId = "crime_dataset",
                               label = "DATASETS",
                               choices = list("By Community", "By Tract"),
                               selected = "By Community")
                 ),
                 mainPanel(leafletOutput("tot_map"))
               )
               
               
             )),
             
             tabPanel("311 Call Data", fluidPage(
               
               sidebarLayout(
                 sidebarPanel(
                   helpText("Create maps with information from 311call dataset."),
                   
                   sliderInput("week", 
                               label = "Week:",
                               min = 1, max = 44, value = 5)
                 ),
                 
                 mainPanel(leafletOutput("call"),
                           plotlyOutput("device311"),
                           plotOutput("month311"))
               )
             )),
             
             tabPanel("Crime Data", fluidPage(
               sidebarLayout(
                 sidebarPanel(
                   selectInput(inputId = "dataset",
                               label = "DATASETS",
                               choices = list("By Community", "By Tract"),
                               selected = "By Community")
                 ),
                 mainPanel(leafletOutput("crime_map"),
                           plotOutput("hour_crime"))
               )
               
             )),
             
             tabPanel("Shelter Data", fluidPage(
                 mainPanel(leafletOutput("shelter"))
               
               
             ))),
  
  navbarMenu("Risk Measurement",
             
             tabPanel("Homeless Density", fluidPage(
               p("Density = total homeless people/ area"),
               mainPanel(leafletOutput("tot_density"))
             )),
             
             tabPanel("Crime Density", fluidPage(
               mainPanel(leafletOutput("crimedensity"))
             )),
             
             tabPanel("Unsheltered Severity")),
  
  
  
  tabPanel("Recommendations")
)


server <- function(input, output, session){
  
  datasets <- observe({
    if(input$dataset == "By Community"){
  
      
      renderTable ({total_commu = data_census17_tract %>%
        group_by(CD) %>%
        summarise(Number = sum(totPeople))
      total_commu$CD = as.character(total_commu$CD)
      commu_combine = left_join(community_map, total_commu,
                                by = c("id" = "CD"))
      })
      community1 = distinct(commu_combine, id, Number)
      commuid = community1$id
    
      commupolygons<-lapply(commuid, function(x) polyFunc(x, dat=commu_combine))
      
      commusp.polygon<-SpatialPolygons(commupolygons)
      commudf.polygon<-SpatialPolygonsDataFrame(commusp.polygon,
                                                data=data.frame(row.names=commuid, community1))
      pal <- colorNumeric(
        palette = "Blues",
        domain = commudf.polygon$Number
      )
      
      
      output$tot_map = renderLeaflet({
        
        leaflet()%>%
          addTiles() %>%
          addPolygons(data = commudf.polygon,
                      fillColor = ~pal(Number),
                      color = "#5297A8", 
                      fillOpacity = 0.8, 
                      weight = 1, 
                      smoothFactor = 1)%>%
          addLegend(pal = pal, 
                    values = commudf.polygon$Number, 
                    position = "bottomright", 
                    title = "Number of Homeless People by District")
        
        
      })
    }
    else{
      
      tract_map = fortify(tract_map2,region = "CT10")
      
      tract_map$id = as.numeric(tract_map$id)
      
      ladata = data_census17_tract %>%
        filter(City == "Los Angeles") %>%
        arrange(-totPeople) %>%
        slice(2:1004)
      
      combine = tract_map %>%
        left_join(ladata,
                  by = c("id"="tract")) %>%
        filter(City == "Los Angeles")
      
      
      
      tract_map1 = distinct(combine, id,  totPeople)
      tractid <- tract_map1$id
      
      polyFunc<-function(groupname, dat){
        poly<-filter(dat, id==groupname) %>%
          dplyr::select(long, lat)
        return(Polygons(list(Polygon(poly)), groupname))
      }
      
      polygons<-lapply(tractid, function(x) polyFunc(x, dat=combine))
      
      sp.polygon<-SpatialPolygons(polygons)
      df.polygon<-SpatialPolygonsDataFrame(sp.polygon,
                                           data=data.frame(row.names=tractid, tract_map1))
      pal <- colorNumeric(
        palette = "Blues",
        domain = df.polygon$totPeople
      )
      
      output$tot_map = renderLeaflet({
        leaflet()%>%
        addTiles() %>%
        addPolygons(data = df.polygon,
                    fillColor = ~pal(totPeople),
                    color = "#5297A8", 
                    fillOpacity = 0.8, 
                    weight = 1, 
                    smoothFactor = 1)%>%
        addLegend(pal = pal, 
                  values = df.polygon$totPeople, 
                  position = "bottomright", 
                  title = "Number of Homeless People by Tract")
  })
    }
    
  })
  

  ### 311 call  
  data_311$Week = week(data_311$CREATEDDATE)
  
  output$call <- renderLeaflet({
    
    data_week311 = data_311 %>%
      filter(Week == input$week) 
    
    data_week311%>%
      leaflet()%>%  
      addTiles() %>%
      addPolygons(data = community_map1,
                  color = "#c8515f", 
                  fillOpacity = 0.5, 
                  weight = 1, 
                  smoothFactor = 1) %>%
      addCircleMarkers(lng=data_week311[,23], lat=data_week311[,22],
                       radius = 6, stroke = FALSE, fillOpacity = 0.5)
  })
    
  
  output$device311 <- renderPlotly({
    
     data_311_1 = data_311 %>%
      group_by(REQUESTSOURCE) %>%
      summarise(Number = n())
     
      ggplotly( ggplot(data_311_1,aes(x = reorder(REQUESTSOURCE,Number),y = Number))+
      geom_bar(stat = "identity", fill = "light blue")+
      coord_flip()+
      labs(x = "Requestsoure",y = "Number", title = "311 Call Request Source Number")+
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
            panel.background= element_blank(), axis.line = element_line(colour = "black"))+
      theme(plot.title = element_text(face = "bold",size = 18))+
      theme(axis.title = element_text(size = 14)))
  

  
  })  
  
  output$month311 <- renderPlot({
    
    data_311$month = str_sub(data_311$CREATEDDATE, start = 6, end = 7)
    data_311 %>%
      filter(month != "11") %>%
      group_by(month) %>%
      summarise(number = n()) %>%
      ggplot(aes(x = month, y = number))+
      geom_bar(stat = "identity", fill = "lightblue")+
      labs(x = "Month",y = "Number", title = "Number of 311 calls by Month")+
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
            panel.background= element_blank(), axis.line = element_line(colour = "black"))+
      theme(plot.title = element_text(face = "bold",size = 18))+
      theme(axis.title = element_text(size = 14))
  })
  
  
  
  
  
##### Crime list  
  datasets <- observe({
    if(input$crime_dataset == "By Community"){
      
    
      renderTable ({cd_crime = data_crime %>%
        left_join(data_census17_tract,
                  by = c("CT10" = "tract")) %>%
        group_by(CD) %>%
        summarise(Number = n())
      
      cd_crime$CD = as.character(cd_crime$CD)
      crime_combine = left_join(community_map, cd_crime,
                                by = c("id" = "CD"))
      })
      
      
      crime1 = distinct(crime_combine, id, Number)
      crimeid = crime1$id
      
      crimepolygons<-lapply(crimeid, function(x) polyFunc(x, dat=crime_combine))
      
      crimesp.polygon<-SpatialPolygons(crimepolygons)
      crimedf.polygon<-SpatialPolygonsDataFrame(crimesp.polygon,
                                                data=data.frame(row.names=crimeid, crime1))
      
      pal <- colorNumeric(
        palette = "Blues",
        domain = crimedf.polygon$Number
      )
      
      output$crime_map <- renderLeaflet({
        leaflet()%>%
          addTiles() %>%
          addPolygons(data = crimedf.polygon,
                      fillColor = ~pal(Number),
                      color = "#5297A8", 
                      fillOpacity = 0.8, 
                      weight = 1, 
                      smoothFactor = 1)%>%
          addLegend(pal = pal, 
                    values = crimedf.polygon$Number, 
                    position = "bottomright", 
                    title = "Number of Crime by District")
      })
    }
    
    else{
      
      crime_tract = data_crime %>%
        group_by(CT10) %>%
        summarise(Number = n())
      
      total_crime = tract_map %>%
        left_join(crime_tract,
                  by = c("id"="CT10"))
      
      crime_map = distinct(total_crime, id,  Number)
      crime_map = crime_map %>%
        filter(Number != "NA")
      crimemapid <- crime_map$id
      
      crimepolygons<-lapply(crimemapid, function(x) polyFunc(x, dat=total_crime))
      
      sp.polygon_crime<-SpatialPolygons(crimepolygons)
      df.polygon_crime<-SpatialPolygonsDataFrame(sp.polygon_crime,
                                                 data=data.frame(row.names=crimemapid, crime_map))
      pal <- colorNumeric(
        palette = "Blues",
        domain = df.polygon_crime$Number
      )
      
     output$crime_map <- renderLeaflet({
       leaflet()%>%
         addTiles() %>%
         addPolygons(data = df.polygon_crime,
                     fillColor = ~pal(Number),
                     color = "#5297A8", 
                     fillOpacity = 0.5, 
                     weight = 1, 
                     smoothFactor = 1)%>%
         addLegend(pal = pal, 
                   values = df.polygon_crime$Number, 
                   position = "bottomright", 
                   title = "Number of Crime by Tract")
     })
      
    }
  })
  
  
  ###Crime
  data_crime$TIME.OCCURRED = 
    format(strptime(substr(as.POSIXct(sprintf("%04.0f", data_crime$TIME.OCCURRED), 
                                      format="%H%M"), 12, 16), '%H:%M'), '%I:%M %p')
  
  data_crime$TIME.OCCURRED = strptime(data_crime$TIME.OCCURRED, "%I:%M %p")
  
  data_crime$TIME.OCCURRED = 
    str_sub(string = data_crime$TIME.OCCURRED, start = 12, end = 13)
  
  
  output$hour_crime = renderPlot({
    data_crime %>%
      group_by(TIME.OCCURRED) %>%
      summarise(number_occured = n()) %>%
      ggplot(aes(x = TIME.OCCURRED, y = number_occured))+
      geom_bar(stat = "identity", fill = "light blue")+
      labs(y = "The Number of Crime", x = "Hour", title = "The Number of Crime Reported by Hour")+
      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), 
            panel.background= element_blank(), axis.line = element_line(colour = "black"))+
      theme(plot.title = element_text(face = "bold",size = 18))+
      theme(axis.title = element_text(size = 14))+
      coord_fixed(ratio = 1/10)
  }) 
  
  
  la_shelter = data_shelter %>%
    filter(CITY == "Los Angeles")
  xy <- la_shelter[,c(1,2)]
  sp_lashelter = SpatialPointsDataFrame(coords = xy, data = la_shelter,
                                        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
  
  
  ###pal <- colorFactor(palette = "Blues", domain = la_shelter$ZIP)
  
  
  output$shelter<-renderLeaflet({
    leaflet(sp_lashelter) %>%
      addTiles() %>%
      addPolygons(data = community_map1,
                  color = "BLUE", 
                  fillOpacity = 0.5, 
                  weight = 1, 
                  smoothFactor = 1) %>%
      addCircleMarkers(stroke = FALSE,  
                       fillOpacity = 0.8,
                       radius = 6,
                       fillColor = "#CD745B")
  
      
  })
 
  
####total density
  
  community_map = fortify(community_map1, region = "DISTRICT")
  communitymap$DISTRICT = as.numeric(communitymap$DISTRICT)
  communitymap$SQ_MI = as.numeric(communitymap$SQ_MI)
  total_commu = data_census17_tract %>%
    group_by(CD) %>%
    summarise(Number = sum(totPeople)) %>%
    left_join(communitymap,
              by = c("CD" = "DISTRICT")) %>%
    mutate(Density = Number/SQ_MI)
  
  
  total_commu$CD = as.character(total_commu$CD)
  commu_combine = left_join(community_map, total_commu,
                            by = c("id" = "CD"))
  
  community1 = distinct(commu_combine, id, Density)
  commuid = community1$id
  
  commupolygons<-lapply(commuid, function(x) polyFunc(x, dat=commu_combine))
  
  commusp.polygon<-SpatialPolygons(commupolygons)
  commudf.polygon<-SpatialPolygonsDataFrame(commusp.polygon,
                                            data=data.frame(row.names=commuid, community1))
  pal <- colorNumeric(
    palette = "Blues",
    domain = commudf.polygon$Density
  )
  
  output$tot_density <- renderLeaflet({
    
    leaflet()%>%
      addTiles() %>%
      addPolygons(data = commudf.polygon,
                  fillColor = ~pal(Density),
                  color = "#5297A8", 
                  fillOpacity = 0.8, 
                  weight = 1, 
                  smoothFactor = 1)%>%
      addLegend(pal = pal, 
                values = commudf.polygon$Density, 
                position = "bottomright", 
                title = "Density of Homeless People by Distrit")
  }) 

  
  ###Crime density
  
  data_community = data_census17_tract %>%
    group_by(CD) %>%
    summarise(total = sum(totPeople))
  
  cd_crime = data_crime %>%
    left_join(data_census17_tract,
              by = c("CT10" = "tract")) %>%
    group_by(CD) %>%
    summarise(Number = n()) %>%
    left_join(data_community,
              by = "CD") %>%
    mutate(density = Number/total)
  
  cd_crime$CD = as.character(cd_crime$CD)
  crime_combine = left_join(community_map, cd_crime,
                            by = c("id" = "CD"))
  
  crime1 = distinct(crime_combine, id, density)
  crimeid = crime1$id
  
  crimepolygons<-lapply(crimeid, function(x) polyFunc(x, dat=crime_combine))
  
  crimesp.polygon<-SpatialPolygons(crimepolygons)
  crimedf.polygon<-SpatialPolygonsDataFrame(crimesp.polygon,
                                            data=data.frame(row.names=crimeid, crime1))
  
  pal <- colorNumeric(
    palette = "Blues",
    domain = crimedf.polygon$density
  )
  
  output$crimedensity<- renderLeaflet({
    leaflet()%>%
      addTiles() %>%
      addPolygons(data = crimedf.polygon,
                  fillColor = ~pal(density),
                  color = "#5297A8", 
                  fillOpacity = 0.8, 
                  weight = 1, 
                  smoothFactor = 1)%>%
      addLegend(pal = pal, 
                values = crimedf.polygon$density, 
                position = "bottomright", 
                title = "Density of Crime by Distrit")
    
  }) 
  
  }
  
  
  


shinyApp(ui,server)







